{"version":3,"sources":["SortingAlgorithms/QuickSort.js","components/InputSlider.js","components/AppBar.js","SortingVisualizer/SortingVisualizer.js","components/Skeleton.js","App.js","index.js"],"names":["getQuickSortAnimations","array","animations","auxillaryArray","slice","quickSort","startIndex","endIndex","pivotIndex","pivot","i","push","swap","partitionArray","length","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","makeStyles","theme","root","width","margin","height","spacing","flexGrow","menuButton","marginRight","title","container","padding","maxHeight","minHeight","overflow","mycontainer","paddingLeft","paddingRight","marginLeft","mySlider","marginTop","position","float","WINDOW_WIDTH","window","innerWidth","innerHeight","parseInt","onresize","Variants","style","Skeleton","animation","App","useState","Math","floor","random","loader","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b554dc9d.chunk.js","sourcesContent":["export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7,2,1,6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles((theme) => ({\n\troot   : {\n\t\twidth : 300\n\t},\n\tmargin : {\n\t\theight : theme.spacing(3)\n\t}\n}));\n\nfunction valuetext (value) {\n\treturn `${value}`;\n}\n\n\n\nexport default function DiscreteSlider ({ sliderValue, maxValue=10, isSliderDisabled, setSliderValue, step=1, min=1, onChange=null }) {\n\tconst classes = useStyles();\n\tconst [value, setValue] = React.useState((maxValue / 10) >> 0);\n\n\tconst onChangeHandler = (event, newValue) => {\n\t\tsetValue(newValue);\n\t\tsetSliderValue(value);\n\t\t//console.log(value, newValue);\n\t\t//setSliderValue(newValue)\n\t\n\t}\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<Slider\n\t\t\t\tvalue={sliderValue}\n\t\t\t\tmin={min}\n\t\t\t\tmax={maxValue}\n\t\t\t\tdefaultValue={sliderValue}\n\t\t\t\tgetAriaValueText={valuetext}\n\t\t\t\taria-labelledby=\"discrete-slider-always\"\n\t\t\t\tstep={step}\n\t\t\t\tvalueLabelDisplay=\"on\"\n\t\t\t\tdisabled={isSliderDisabled}\n\t\t\t\tonChange={onChangeHandler}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { ButtonGroup } from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport LocalFloristTwoToneIcon from '@material-ui/icons/LocalFloristTwoTone';\nimport styled from 'styled-components';\n\nconst useStyles = makeStyles((theme) => ({\n\troot       : {\n\t\tflexGrow : 1\n\t},\n\tmenuButton : {\n\t\tmarginRight : theme.spacing(2)\n\t},\n\ttitle      : {\n\t\tflexGrow : 1\n\t}\n}));\n\nexport default function ButtonAppBar ({\n\tbubbleSort,\n\tselectionSort,\n\tInsertionSort,\n\tmergeSort,\n\tquickSort,\n\tsetReinitialize,\n\tnotify,\n\tSET_ANIMATION_SPEED_MS\n}) {\n\tconst classes = useStyles();\n\tconst [ isDisabled, setIsDisabled ] = useState(false);\n\n\t// const onClick1 = () => {\n\t// \tbubbleSort();\n\t// \tsetIsDisabled(true);\n\t// \tsetReinitialize(true);\n\t// };\n\n\tconst onClickHandler = (e) => {\n\t\tswitch (e.currentTarget.value) {\n\t\t\tcase 'bubbleSort':\n\t\t\t\tbubbleSort();\n\n\t\t\t\tbreak;\n\t\t\tcase 'selectionSort':\n\t\t\t\tselectionSort();\n\t\t\t\tbreak;\n\t\t\tcase 'InsertionSort':\n\t\t\t\tInsertionSort();\n\t\t\t\tbreak;\n\t\t\tcase 'mergeSort':\n\t\t\t\tmergeSort();\n\t\t\t\tbreak;\n\t\t\tcase 'quickSort':\n\t\t\t\tquickSort();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\n\t\tsetIsDisabled(true);\n\t\tsetReinitialize(true);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<AppBar position=\"static\">\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\">\n\t\t\t\t\t\t<LocalFloristTwoToneIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<Typography variant=\"h6\" className={classes.title}>\n\t\t\t\t\t\tAlgorithm Visualizer\n\t\t\t\t\t</Typography>\n\n\t\t\t\t\t<textContainer>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\tvalue=\"bubbleSort\"\n\t\t\t\t\t\t\tonClick={(e) => onClickHandler(e, 'value')}\n\t\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBubble Sort\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\tvalue=\"selectionSort\"\n\t\t\t\t\t\t\tonClick={(e) => onClickHandler(e, 'value')}\n\t\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSelection Sort\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\tvalue=\"InsertionSort\"\n\t\t\t\t\t\t\tonClick={(e) => onClickHandler(e, 'value')}\n\t\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tInsertion Sort\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\tvalue=\"mergeSort\"\n\t\t\t\t\t\t\tonClick={(e) => onClickHandler(e, 'value')}\n\t\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tMerge Sort\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\tvalue=\"quickSort\"\n\t\t\t\t\t\t\tonClick={(e) => onClickHandler(e, 'value')}\n\t\t\t\t\t\t\tdisabled={isDisabled}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tQuick Sort\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</textContainer>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t</div>\n\t);\n}\n","import React, { Fragment, useState, useEffect, useLayoutEffect } from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/MergeSort';\nimport { getQuickSortAnimations } from '../SortingAlgorithms/QuickSort';\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/InsertionSort';\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/SelectionSort';\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/BubbleSort';\nimport Container from '@material-ui/core/Container';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport InputSlider from '../components/InputSlider';\nimport 'react-notifications-component/dist/theme.css';\nimport { Button, makeStyles, Fade } from '@material-ui/core';\nimport ButtonAppBar from '../components/AppBar';\n\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { store } from 'react-notifications-component';\nimport SimpleSnackbar from '../components/snackbar';\n\nconst useStyles = makeStyles((theme) => ({\n\troot        : {\n\t\tflexGrow : 1\n\t},\n\tcontainer   : {\n\t\tpadding   : 0,\n\t\tmargin    : 0,\n\t\tmaxHeight : '100vh',\n\t\tminHeight : '100vh',\n\t\toverflow  : 'hidden'\n\t},\n\n\tmycontainer : {\n\t\tpaddingLeft  : '15px',\n\t\tpaddingRight : '15px',\n\t\tmarginLeft   : '1vw',\n\t\tmarginRight  : '1vw',\n\t\theight       : '100vh',\n\n\t\toverflow     : 'hidden'\n\t},\n\n\tmySlider    : {\n\t\tflexGrow   : '2',\n\t\tmarginLeft : '10vw',\n\t\tmarginTop  : '1vh',\n\t\tposition   : 'absolute',\n\t\tfloat      : 'right'\n\t}\n}));\n\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 250) / 9);\n\nfunction reportWindowSize () {\n\tWINDOW_WIDTH = window.innerWidth;\n\tWINDOW_HEIGHT = window.innerHeight;\n\tNUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 250) / 9);\n}\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\n\nconst PRIMARY_COLOR = '#557A95'; //Normal color of bars\nconst SECONDARY_COLOR = '#fe4a49'; //Color of bars when they are being compared\n//Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = 'Currently Disabled';\nconst ENABLED_BUTTON = { dummy: 'currently enabled' };\n\nconst SortingVisualizer = (props) => {\n\tconst classes = useStyles();\n\tconst [msg, setMsg] = useState('Welcome')\n\tconst [ ANIMATION_SPEED_MS, SET_ANIMATION_SPEED_MS ] = useState(10);\n\tconst [ buttonText, setButtonText ] = useState('RANDOMIZE ARRAY');\n\tconst [ reinitialize, setReinitialize ] = useState(false);\n\tconst [popup, setPopup] = useState(reinitialize);\n\tconst [ stopAllExec, setStopAllExec ] = useState(false);\n\tconst [ barArray, setBarArray ] = useState([]);\n\tconst [ sliderValue, setSliderValue ] = useState((NUMBER_OF_ARRAY_BARS / 4) >> 0); //(NUMBER_OF_ARRAY_BARS / 4) >> 0\n\tconst [ barWidth, setBarWidth ] = useState((0.8 * WINDOW_WIDTH / sliderValue) >> 0); // (WINDOW_WIDTH / sliderValue *500) >> 0\n\tconst [ isSorted, setIsSorted ] = useState(false);\n\n\tconst showNotification = (title, message, type, duration = 5000) => {\n\t\tstore.addNotification({\n\t\t\ttitle        : title,\n\t\t\tmessage      : message,\n\t\t\ttype         : type,\n\t\t\tinsert       : 'top',\n\t\t\tcontainer    : 'top-right',\n\t\t\tanimationIn  : [ 'animated', 'fadeIn' ],\n\t\t\tanimationOut : [ 'animated', 'fadeOut' ],\n\t\t\tdismiss      : {\n\t\t\t\tduration : duration,\n\t\t\t\tonScreen : true\n\t\t\t}\n\t\t});\n\t};\n\tfunction useWindowSize () {\n\t\tconst [ size, setSize ] = useState([ 0, 0 ]);\n\t\tuseLayoutEffect(() => {\n\t\t\tfunction updateSize () {\n\t\t\t\tsetSize([ window.innerWidth, window.innerHeight ]);\n\t\t\t}\n\t\t\twindow.addEventListener('resize', updateSize);\n\t\t\tupdateSize();\n\t\t\treturn () => window.removeEventListener('resize', updateSize);\n\t\t}, []);\n\t\treturn size;\n\t}\n\n\tconst size = useWindowSize();\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconsole.log(ANIMATION_SPEED_MS);\n\t\t},\n\t\t[ ANIMATION_SPEED_MS ]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tresetArray();\n\t\t\tconsole.log(barArray, sliderValue);\n\t\t},\n\t\t[ sliderValue, size ]\n\t);\n\tuseEffect(\n\t\t() => {\n\t\t\tconsole.log(WINDOW_WIDTH, sliderValue);\n\t\t\tsetBarWidth((0.8 * WINDOW_WIDTH / sliderValue) >> 0); //(WINDOW_WIDTH / barArray.length) >> 0\n\t\t},\n\t\t[ barArray ]\n\t);\n\n\t//Generates new random array\n\tconst resetArray = () => {\n\t\tconst arr = [];\n\t\tfor (let i = 0; i < sliderValue; i++) {\n\t\t\tarr.push(randomIntFromInterval(50, WINDOW_HEIGHT - 650 / 2));\n\t\t}\n\t\tsetBarArray(arr);\n\t\tsetBarWidth((0.8 * WINDOW_WIDTH / sliderValue) >> 0);\n\t};\n\n\tconst disableSortButtons = () => {\n\t\treturn;\n\t};\n\tconst restoreStoreButtons = () => {\n\t\treturn;\n\t};\n\t//Sorting Algorithms\n\tconst mergeSort = () => {\n\t\tsetMsg('Sorting using Merge Sort');\n\t\tconst [ animations, sortArray ] = getMergeSortAnimations(barArray);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst isColorChange = i % 3 !== 2;\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tif (isColorChange === true) {\n\t\t\t\tconst [ barOneIndex, barTwoIndex ] = animations[i];\n\t\t\t\tconst color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\t\t\t\tconst barOneStyle = arrayBars[barOneIndex].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIndex].style;\n\t\t\t\t//If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst [ barOneIdx, newHeight ] = animations[i];\n\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style;\n\t\t\t\t\tbarOneStyle.height = `${newHeight}px`;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t}\n\t\t// this.setState({array: sortArray})\n\t\tconst RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n\t\tsetTimeout(() => setMsg('Sorting Done'), RESTORE_TIME);\n\n\t\t\n\t};\n\tconst quickSort = () => {\n\n\t\tsetMsg('Sorting using Qucik Sort');\n\t\t\n\t\tconst [ animations, sortArray ] = getQuickSortAnimations(barArray);\n\t\tfor (let i; i < animations.length - 1; i++) {\n\n\t\t\t\n\n\t\t\tconst isColorChange = i % 6 === 0 || i % 6 === 1;\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tif (isColorChange === true) {\n\t\t\t\tconst color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\t\t\t\tconst [ barOneIndex, barTwoIndex ] = animations[i];\n\t\t\t\tif (barOneIndex === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst barOneStyle = arrayBars[barOneIndex].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst [ barIndex, newHeight ] = animations[i];\n\t\t\t\tif (barIndex === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst barStyle = arrayBars[barIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t}\n\t\t// this.setState({array: sortArray})\n\t\tconst RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n\t\tconsole.log(RESTORE_TIME);\n\t\tsetTimeout(() => setMsg('Done...'), RESTORE_TIME);\n\n\t};\n\n\tconst bubbleSort = () => {\n\t\tsetMsg('Sorting using Bubble Sort');\n\t\tconst [ animations, sortArray ] = getBubbleSortAnimations(barArray);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconsole.log('...................>>>>>>>>...........', ANIMATION_SPEED_MS);\n\n\t\t\tconst isColorChange = i % 4 === 0 || i % 4 === 1;\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tif (isColorChange === true) {\n\t\t\t\tconst color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\t\t\t\tconst [ barOneIndex, barTwoIndex ] = animations[i];\n\t\t\t\tconst barOneStyle = arrayBars[barOneIndex].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst [ barIndex, newHeight ] = animations[i];\n\t\t\t\tif (barIndex === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst barStyle = arrayBars[barIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t}\n\t\t// this.setState({array: sortArray})\n\t\tconst RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n\t\tsetTimeout(() => restoreStoreButtons(), RESTORE_TIME);\n\t};\n\n\tconst insertionSort = () => {\n\t\tsetMsg('Sorting using Insertion Sort');\n\t\tconst [ animations, sortArray ] = getInsertionSortAnimations(barArray);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst isColorChange = animations[i][0] === 'comparision1' || animations[i][0] === 'comparision2';\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tif (isColorChange === true) {\n\t\t\t\tconst color = animations[i][0] === 'comparision1' ? SECONDARY_COLOR : PRIMARY_COLOR;\n\t\t\t\tconst [ temp, barOneIndex, barTwoIndex ] = animations[i];\n\t\t\t\tconst barOneStyle = arrayBars[barOneIndex].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst [ temp, barIndex, newHeight ] = animations[i];\n\t\t\t\tconst barStyle = arrayBars[barIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t}\n\t\t// this.setState({array: sortArray})\n\t\tconst RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n\t\tsetTimeout(() => restoreStoreButtons(), RESTORE_TIME);\n\t};\n\n\tconst selectionSort = () => {\n\n\t\tsetMsg('Sorting using Selection Sort');\n\t\tconst [ animations, sortArray ] = getSelectionSortAnimations(barArray);\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tconst isColorChange = animations[i][0] === 'comparision1' || animations[i][0] === 'comparision2';\n\t\t\tconst arrayBars = document.getElementsByClassName('array-bar');\n\t\t\tif (isColorChange === true) {\n\t\t\t\tconst color = animations[i][0] === 'comparision1' ? SECONDARY_COLOR : PRIMARY_COLOR;\n\t\t\t\tconst [ temp, barOneIndex, barTwoIndex ] = animations[i];\n\t\t\t\tconst barOneStyle = arrayBars[barOneIndex].style;\n\t\t\t\tconst barTwoStyle = arrayBars[barTwoIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarOneStyle.backgroundColor = color;\n\t\t\t\t\tbarTwoStyle.backgroundColor = color;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst [ temp, barIndex, newHeight ] = animations[i];\n\t\t\t\tconst barStyle = arrayBars[barIndex].style;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tbarStyle.height = `${newHeight}px`;\n\t\t\t\t}, i * ANIMATION_SPEED_MS);\n\t\t\t}\n\t\t}\n\t\t// this.setState({array: sortArray})\n\t\tconst RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n\t\tsetTimeout(() => restoreStoreButtons(), RESTORE_TIME);\n\t};\n\n\tconst heapSort = () => {\n\t\treturn console.log('Not Implemented!');\n\t};\n\tconst array = barArray;\n\tconst SORT_BUTTONS = 6;\n\tconst TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n\n\tconst reinitializeEverything = () => {\n\t\treinitialize ? window.location.reload(): resetArray();\n\t};\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsetButtonText(() => (reinitialize ? '  REINITIALIZE  ' : 'RANDOMIZE ARRAY'));\n\t\t},\n\t\t[ reinitialize ]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\treinitializeEverything();\n\t\t},\n\t\t[ isSorted ]\n\t);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Fade in={true} timeout={'1500'}>\n\t\t\t\t<Container\n\t\t\t\t\tclassName={classes.container}\n\t\t\t\t\tmaxWidth=\"xs\"\n\t\t\t\t\tmaxWidth=\"xl\"\n\t\t\t\t\tstyle={{ backgroundColor: '#cfe8fc'}}\n\t\t\t\t>\n\t\t\t\t\t<ButtonAppBar\n\t\t\t\t\t\tSET_ANIMATION_SPEED_MS={SET_ANIMATION_SPEED_MS}\n\t\t\t\t\t\treinitializeEverything={reinitializeEverything}\n\t\t\t\t\t\tnotify={showNotification}\n\t\t\t\t\t\tsetReinitialize={setReinitialize}\n\t\t\t\t\t\tbubbleSort={bubbleSort}\n\t\t\t\t\t\tselectionSort={selectionSort}\n\t\t\t\t\t\tInsertionSort={insertionSort}\n\t\t\t\t\t\tmergeSort={mergeSort}\n\t\t\t\t\t\tquickSort={quickSort}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Container\n\t\t\t\t\t\tclassName={classes.mycontainer}\n\t\t\t\t\t\tmaxWidth=\"xs\"\n\t\t\t\t\t\tmaxWidth=\"l\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition        : 'relative',\n\t\t\t\t\t\t\tbackgroundColor : '#96ceb4', //#00B4AB\n\t\t\t\t\t\t\tmaxWidth        : '98vw',\n\t\t\t\t\t\t\tmaxHeight       : '85vh'\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\n\n\t\t\t\t\t\t{array.map((value, idx) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"array-bar\"\n\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tposition        : 'relative',\n\t\t\t\t\t\t\t\t\tbackgroundColor : PRIMARY_COLOR,\n\t\t\t\t\t\t\t\t\theight          : `${value}px`,\n\t\t\t\t\t\t\t\t\twidth           : `${barWidth}px`\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Container>\n\n\t\t\t\t\t\n\n\t\t\t\t\t<div style={{ width: '100%'}}>\n\t\t\t\t\t\t<Box display=\"flex\" p={1} alignContent=\"center\" marginBottom= '10px'>\n\t\t\t\t\t\t\t<Box p={1} flexGrow={1}>\n\t\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t\t<InputSlider\n\t\t\t\t\t\t\t\t\t\tsliderValue={sliderValue}\n\t\t\t\t\t\t\t\t\t\tmin={10}\n\t\t\t\t\t\t\t\t\t\tmaxValue={NUMBER_OF_ARRAY_BARS}\n\t\t\t\t\t\t\t\t\t\tsetSliderValue={setSliderValue}\n\t\t\t\t\t\t\t\t\t\tisSliderDisabled={reinitialize}\n\t\t\t\t\t\t\t\t\t\tonChange={setSliderValue}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Typography id=\"range-slider\" variant=\"h7\" color='inherit'>\n\t\t\t\t\t\t\t\t\t\tSelect Array Size\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box p={1} flexGrow={1}>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\tcolor={!reinitialize ? 'primary' : 'secondary'}\n\t\t\t\t\t\t\t\t\tonClick={reinitializeEverything}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{buttonText}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t<Box p={1}>\n\t\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t\t<InputSlider\n\t\t\t\t\t\t\t\t\t\tsliderValue={ANIMATION_SPEED_MS}\n\t\t\t\t\t\t\t\t\t\tstep={0.5}\n\t\t\t\t\t\t\t\t\t\tmin={0.01}\n\t\t\t\t\t\t\t\t\t\tmaxValue={200}\n\t\t\t\t\t\t\t\t\t\tsetSliderValue={SET_ANIMATION_SPEED_MS}\n\t\t\t\t\t\t\t\t\t\tisSliderDisabled={reinitialize}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Typography id=\"range-slider\" variant=\"h7\" gutterBottom color='inherit'>\n\t\t\t\t\t\t\t\t\t\tSet Animation Delay (MS)\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<SimpleSnackbar msg={msg} stateVal={!reinitialize}/>\n\t\t\t\t</Container>\n\t\t\t</Fade>\n\t\t</Fragment>\n\t);\n};\n\nconst randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\nexport default SortingVisualizer;\n","import React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nexport default function Variants () {\n\treturn (\n\t\t<div style={{ width: '100vw', height: '100vh' }}>\n\t\t\t<Skeleton />\n\t\t\t<Skeleton animation={false} />\n\t\t\t<Skeleton animation=\"wave\" />\n\t\t</div>\n\t);\n}\n","import React, { useState } from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport CircularProgressWithLabel from './components/Loader';\nimport './App.css';\nimport Variants from './components/Skeleton';\n\nconst App = () => {\n\tconst [ loader, setLoader ] = useState(Math.floor(Math.random()) * 20);\n\tconsole.log(loader);\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"app-container\">\n\t\t\t\t<Variants>\n\t\t\t\t\t{/* {loader < 100 ? (\n\t\t\t\t\t<CircularProgressWithLabel\n\t\t\t\t\t\tsize={'13rem'}\n\t\t\t\t\t\tsetLoader={setLoader}\n\t\t\t\t\t\tprogress={loader}\n\t\t\t\t\t\tinitial={loader}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<SortingVisualizer />\n\t\t\t\t)} */}\n\t\t\t\t</Variants>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}